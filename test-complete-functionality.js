require('dotenv').config({ path: '.env.local' });
const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
    console.error('Erreur: Les variables d\'environnement NEXT_PUBLIC_SUPABASE_URL et NEXT_PUBLIC_SUPABASE_ANON_KEY doivent √™tre d√©finies.');
    process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function testCompleteFunctionality() {
    console.log('üß™ Test complet des nouvelles fonctionnalit√©s...');

    try {
        // 1. V√©rifier si les colonnes existent
        console.log('\nüîç V√©rification des colonnes...');
        const { data: testData, error: testError } = await supabase
            .from('pro_profiles')
            .select('duree_consultation, disponibilites')
            .limit(1);

        if (testError) {
            console.error('‚ùå Les colonnes n\'existent pas encore:', testError.message);
            console.log('\nüìã Instructions:');
            console.log('1. Allez dans l\'interface Supabase');
            console.log('2. Ouvrez l\'onglet "Table Editor"');
            console.log('3. S√©lectionnez la table "pro_profiles"');
            console.log('4. Ajoutez les colonnes suivantes:');
            console.log('   - duree_consultation (int4, default: 60)');
            console.log('   - disponibilites (jsonb, default: voir le fichier add-columns-manual.md)');
            console.log('5. Relancez ce test');
            return;
        }

        console.log('‚úÖ Les colonnes existent !');

        // 2. Tester la mise √† jour compl√®te
        console.log('\nüîÑ Test de mise √† jour compl√®te...');
        
        const updateData = {
            experience: 12,
            duree_consultation: 90,
            disponibilites: {
                lundi: { matin: true, apresMidi: true, soir: false },
                mardi: { matin: true, apresMidi: true, soir: false },
                mercredi: { matin: true, apresMidi: true, soir: false },
                jeudi: { matin: true, apresMidi: true, soir: false },
                vendredi: { matin: true, apresMidi: true, soir: false },
                samedi: { matin: true, apresMidi: false, soir: false },
                dimanche: { matin: false, apresMidi: false, soir: false }
            }
        };

        const { error: updateError } = await supabase
            .from('pro_profiles')
            .update(updateData)
            .eq('user_id', '6da9e597-38ba-451f-9f0c-51138734a2c6');

        if (updateError) {
            console.error('‚ùå Erreur lors de la mise √† jour:', updateError);
            return;
        }

        console.log('‚úÖ Mise √† jour r√©ussie !');

        // 3. V√©rifier la sauvegarde
        console.log('\nüîç V√©rification de la sauvegarde...');
        const { data: updatedPro, error: fetchError } = await supabase
            .from('pro_profiles')
            .select('*')
            .eq('user_id', '6da9e597-38ba-451f-9f0c-51138734a2c6');

        if (fetchError) {
            console.error('‚ùå Erreur lors de la v√©rification:', fetchError);
            return;
        }

        if (updatedPro.length > 0) {
            const pro = updatedPro[0];
            console.log(`\n‚úÖ V√©rification r√©ussie:`);
            console.log(`   Nom: ${pro.prenom} ${pro.nom}`);
            console.log(`   Exp√©rience: ${pro.experience} ans`);
            console.log(`   Dur√©e consultation: ${pro.duree_consultation} minutes`);
            console.log(`   Disponibilit√©s:`, JSON.stringify(pro.disponibilites, null, 2));
        }

        console.log('\nüéâ Toutes les fonctionnalit√©s fonctionnent correctement !');
        console.log('‚úÖ Le professionnel peut maintenant g√©rer ses disponibilit√©s et la dur√©e de ses consultations.');

    } catch (error) {
        console.error('‚ùå Erreur:', error);
    }
}

testCompleteFunctionality();
