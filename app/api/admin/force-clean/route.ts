import { NextRequest, NextResponse } from "next/server";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth";
import { supabase } from "@/lib/supabase";

export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);
    
    if (!session?.user) {
      return NextResponse.json({ error: "Non autoris√©" }, { status: 401 });
    }

    console.log('üî• NETTOYAGE FORC√â - Suppression de TOUT...');

    // 1. Supprimer TOUS les rendez-vous
    console.log('üìÖ Suppression de TOUS les rendez-vous...');
    const { error: rdvError } = await supabase
      .from('rendez_vous')
      .delete()
      .neq('id', 'dummy'); // Supprime tout

    if (rdvError) {
      console.error('‚ùå Erreur rendez-vous:', rdvError);
    } else {
      console.log('‚úÖ TOUS les rendez-vous supprim√©s');
    }

    // 2. Supprimer TOUTES les demandes
    console.log('üìã Suppression de TOUTES les demandes...');
    const { error: demandesError } = await supabase
      .from('demandes')
      .delete()
      .neq('id', 'dummy'); // Supprime tout

    if (demandesError) {
      console.error('‚ùå Erreur demandes:', demandesError);
    } else {
      console.log('‚úÖ TOUTES les demandes supprim√©es');
    }

    // 3. Supprimer TOUS les clients
    console.log('üë• Suppression de TOUS les clients...');
    const { error: clientsError } = await supabase
      .from('clients')
      .delete()
      .neq('id', 'dummy'); // Supprime tout

    if (clientsError) {
      console.error('‚ùå Erreur clients:', clientsError);
    } else {
      console.log('‚úÖ TOUS les clients supprim√©s');
    }

    // 4. Supprimer TOUTES les tourn√©es
    console.log('üöó Suppression de TOUTES les tourn√©es...');
    const { error: tourneesError } = await supabase
      .from('tournees')
      .delete()
      .neq('id', 'dummy'); // Supprime tout

    if (tourneesError) {
      console.error('‚ùå Erreur tourn√©es:', tourneesError);
    } else {
      console.log('‚úÖ TOUTES les tourn√©es supprim√©es');
    }

    console.log('üéâ NETTOYAGE FORC√â TERMIN√â !');

    return NextResponse.json({ 
      success: true, 
      message: "NETTOYAGE FORC√â TERMIN√â - Plus aucun rendez-vous 'Sophie Martin' !" 
    });

  } catch (error) {
    console.error("Erreur lors du nettoyage forc√©:", error);
    return NextResponse.json(
      { error: "Erreur interne du serveur" },
      { status: 500 }
    );
  }
}

